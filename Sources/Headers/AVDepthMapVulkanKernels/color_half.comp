#ifndef COLOR_HALF
#define COLOR_HALF

// Convert RGB(A) to XYZ
f16vec3 rgb2xyz(const f16vec3 c)
{
    return f16vec3(0.4124564f * c.x + 0.3575761f * c.y + 0.1804375f * c.z,
                   0.2126729f * c.x + 0.7151522f * c.y + 0.0721750f * c.z,
                   0.0193339f * c.x + 0.1191920f * c.y + 0.9503041f * c.z);
}

// Convert XYZ to LAB
f16vec3 xyz2lab(const f16vec3 c) {
    // assuming whitepoint D65, XYZ=(0.95047, 1.00000, 1.08883)
    f16vec3 r = f16vec3(c.x / 0.95047f, c.y, c.z / 1.08883f);

    f16vec3 f = f16vec3((r.x > 216.0f / 24389.0f ? pow(r.x, 1.0 / 3.0) : (24389.0f / 27.0f * r.x + 16.0f) / 116.0f),
                        (r.y > 216.0f / 24389.0f ? pow(r.y, 1.0 / 3.0) : (24389.0f / 27.0f * r.y + 16.0f) / 116.0f),
                        (r.z > 216.0f / 24389.0f ? pow(r.z, 1.0 / 3.0) : (24389.0f / 27.0f * r.z + 16.0f) / 116.0f));

    f16vec3 outVal = f16vec3(116.0f * f.y - 16.0f, 500.0f * (f.x - f.y), 200.0f * (f.y - f.z));

    // convert values to fit into 0..255 (could be out-of-range)
    // TODO FACA: use float textures, the values are out-of-range for a and b.
    outVal = outVal * float16_t(2.55f);
    return outVal;
}

#endif